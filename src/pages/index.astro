---
import Layout from '../layouts/Layout.astro';
import RightSidebar from '../components/RightSidebar.astro';
import ToolCard from '../components/ToolCard.astro';
import toolsData from '../data/directory.json';
import type { Tool } from '../types';

const tools: Tool[] = toolsData as Tool[];
const createCategoryId = (category: string) => category.toLowerCase().replace(/[^a-z0-9]+/g, '-');

const toolsByCategory = tools.reduce((acc: Record<string, Tool[]>, tool) => {
    const { category } = tool;
    if (!acc[category]) {
        acc[category] = [];
    }
    acc[category].push(tool);
    return acc;
}, {});
const categories = Object.keys(toolsByCategory);

const allTags = [...new Set(tools.flatMap(tool => tool.tags))];
---

<Layout title="Cloud Monitoring Platforms">
    <div class="container mx-auto flex flex-col md:flex-row gap-8 px-4 py-8">
        
        <div class="w-full md:w-8/12 lg:w-9/12">
            <h1 class="text-4xl font-bold mb-4 text-gray-900 dark:text-white">Cloud Monitoring Platforms</h1>
            <h4 class="text-xl text-gray-600 dark:text-gray-400 mb-6">Search cloud monitoring platforms</h4>

            <div class="mb-6">
               
                <div class="flex flex-wrap gap-2">
                    {allTags.map(tag => (
                        <button class="tag-pill bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200 px-2 py-0.5 text-xs rounded-full" data-tag={tag}>
                            {tag}
                        </button>
                    ))}
                </div>
            </div>

            <div class="mb-12 flex flex-col sm:flex-row gap-2 relative">
                <input 
                    type="search" 
                    id="searchInput"
                    placeholder="Search for tools..." 
                    class="w-full sm:w-auto p-2 text-sm border rounded-md focus:ring-blue-500 focus:border-blue-500 flex-grow dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                >
                <div id="suggestions" class="absolute z-10 w-full bg-white border rounded-md shadow-lg hidden" style="top: 100%;"></div>
                <button id="searchButton" class="bg-blue-600 text-white px-4 py-2 text-sm rounded-md hover:bg-blue-700 transition-colors duration-200">Search</button>
            </div>

            {Object.entries(toolsByCategory).map(([category, categoryTools]) => (
                <section id={createCategoryId(category)} class="category-section mb-12 scroll-mt-20">
                
                    <h2 class="text-3xl font-semibold mb-6 border-b pb-2 border-gray-200 dark:border-gray-700 text-gray-900 dark:text-white">{category}</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        {categoryTools.map(tool => (
                            <div class="tool-card" data-tags={tool.tags.join(',')}>
                                <ToolCard
                                    title={tool.title}
                                    link={tool.link}
                                    description={tool.description}
                                    image={tool.image}
                                    tags={tool.tags}
                                />
                            </div>
                        ))}
                    </div>
                </section>
            ))}
        </div>

        <div class="w-full md:w-4/12 lg:w-3/12">
            <RightSidebar categories={categories} />
        </div>
    </div>
</Layout>

<style>
  .scroll-mt-20 {
    scroll-margin-top: 5rem;
  }
</style>

<script>
    import type { Tool } from '../types';
    document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('searchInput') as HTMLInputElement;
        const searchButton = document.getElementById('searchButton');
        const suggestionsContainer = document.getElementById('suggestions');
        const tagPills = document.querySelectorAll('.tag-pill') as NodeListOf<HTMLElement>;
        const categorySections = document.querySelectorAll('.category-section') as NodeListOf<HTMLElement>;

        const unselectedClasses = ['bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-200', 'hover:bg-gray-300', 'dark:hover:bg-gray-600'];
        const selectedClasses = ['bg-blue-600', 'dark:bg-blue-500', 'text-white'];

        function filterContent() {
            const searchQuery = searchInput.value.toLowerCase().trim();
            const selectedTags = new Set<string>();
            tagPills.forEach(pill => {
                if(pill.classList.contains('bg-blue-600')) {
                    const tag = pill.getAttribute('data-tag');
                    if(tag) selectedTags.add(tag);
                }
            });

            categorySections.forEach(section => {
                let visibleCardsCount = 0;
                const toolCardsInSection = section.querySelectorAll<HTMLElement>('.tool-card');

                toolCardsInSection.forEach(card => {
                    const toolTagsAttribute = card.getAttribute('data-tags');
                    const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
                    const description = card.querySelector('p')?.textContent?.toLowerCase() || '';

                    const matchesSearch = !searchQuery || title.includes(searchQuery) || description.includes(searchQuery) || (toolTagsAttribute && toolTagsAttribute.toLowerCase().includes(searchQuery));

                    const toolTags = new Set(toolTagsAttribute ? toolTagsAttribute.split(',').map(t => t.trim()) : []);
                    const matchesTags = selectedTags.size === 0 || [...selectedTags].every(tag => toolTags.has(tag));

                    const isVisible = matchesSearch && matchesTags;

                    card.style.display = isVisible ? 'block' : 'none';
                    if (isVisible) {
                        visibleCardsCount++;
                    }
                });

                const categoryHasVisibleTools = visibleCardsCount > 0;
                section.style.display = categoryHasVisibleTools ? 'block' : 'none';
            });
        }

        tagPills.forEach(pill => {
            pill.addEventListener('click', () => {
                const tag = pill.getAttribute('data-tag');
                if (tag) {
                    if (pill.classList.contains('bg-blue-600')) {
                        pill.classList.remove(...selectedClasses);
                        pill.classList.add(...unselectedClasses);
                    } else {
                        pill.classList.remove(...unselectedClasses);
                        pill.classList.add(...selectedClasses);
                    }
                    filterContent();
                }
            });
        });

        if (searchButton) {
            searchButton.addEventListener('click', filterContent);
        }

        if (searchInput) {
            searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    filterContent();
                    if(suggestionsContainer) suggestionsContainer.classList.add('hidden');
                }
            });

            // As-you-type search suggestions and clear functionality
            searchInput.addEventListener('input', async () => {
                const query = searchInput.value.trim();

                if (query === "") {
                    filterContent(); // Reset the list
                }

                if (!suggestionsContainer) return;

                if (query.length < 2) {
                    suggestionsContainer.innerHTML = '';
                    suggestionsContainer.classList.add('hidden');
                    return;
                }

                const response = await fetch(`/api/search?q=${query}`);
                const results: Tool[] = await response.json();

                if (results.length > 0) {
                    suggestionsContainer.innerHTML = results.map((tool: Tool) =>
                        `<a href="${tool.link}" target="_blank" rel="noopener noreferrer" class="block p-2 hover:bg-gray-100">${tool.title}</a>`
                    ).join('');
                    suggestionsContainer.classList.remove('hidden');
                } else {
                    suggestionsContainer.innerHTML = '<div class="p-2 text-gray-500">No results found</div>';
                    suggestionsContainer.classList.remove('hidden');
                }
            });
        }

        if (suggestionsContainer) {
            document.addEventListener('click', (event) => {
                if (!suggestionsContainer.contains(event.target as Node) && event.target !== searchInput) {
                    suggestionsContainer.classList.add('hidden');
                }
            });
        }
    });
</script>