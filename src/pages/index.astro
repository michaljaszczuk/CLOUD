---
import Layout from '../layouts/Layout.astro';
import RightSidebar from '../components/RightSidebar.astro';
import ToolCard from '../components/ToolCard.astro';
import toolsData from '../data/directory.json';
import type { Tool } from '../types';

const tools: Tool[] = toolsData as Tool[];

const createCategoryId = (category: string) => category.toLowerCase().replace(/[^a-z0-9]+/g, '-');

const toolsByCategory = tools.reduce((acc: Record<string, Tool[]>, tool) => {
    const { category } = tool;
    if (!acc[category]) {
        acc[category] = [];
    }
    acc[category].push(tool);
    return acc;
}, {});

const categories = Object.keys(toolsByCategory);

const allTags = [...new Set(tools.flatMap(tool => tool.tags))];
---

<Layout title="Cloud Monitoring Platforms">
    <div class="container mx-auto flex flex-col md:flex-row gap-8 px-4 py-8">
        
        <div class="w-full md:w-8/12 lg:w-9/12">
            <h1 class="text-4xl font-bold mb-4">Cloud Monitoring Platforms</h1>
            <h4 class="text-xl text-gray-600 mb-6">Search cloud monitoring platforms</h4>

            <div class="mb-6">
                <div class="flex flex-wrap gap-2">
                    {allTags.map(tag => (
                        <button class="tag-pill bg-gray-200 text-gray-700 px-2 py-0.5 text-xs rounded-full hover:bg-gray-300 transition-colors duration-200" data-tag={tag}>
                            {tag}
                        </button>
                    ))}
                </div>
            </div>

            <div class="mb-12 flex flex-col sm:flex-row gap-2">
                <input type="search" placeholder="Search..." class="w-full sm:w-auto p-2 text-sm border rounded-md focus:ring-blue-500 focus:border-blue-500 flex-grow">
                <button class="bg-blue-600 text-white px-4 py-2 text-sm rounded-md hover:bg-blue-700 transition-colors duration-200">Search</button>
            </div>

            {Object.entries(toolsByCategory).map(([category, categoryTools]) => (
                <section id={createCategoryId(category)} class="category-section mb-12 scroll-mt-20">
                    <h2 class="text-3xl font-semibold mb-6 border-b pb-2">{category}</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        {categoryTools.map(tool => (
                            <div class="tool-card" data-tags={tool.tags.join(',')}>
                                <ToolCard
                                    title={tool.title}
                                    link={tool.link}
                                    description={tool.description}
                                    image={tool.image}
                                    tags={tool.tags}
                                />
                            </div>
                        ))}
                    </div>
                </section>
            ))}
        </div>

        <div class="w-full md:w-4/12 lg:w-3/12">
            <RightSidebar categories={categories} />
        </div>
    </div>
</Layout>

<style>
  .scroll-mt-20 {
    scroll-margin-top: 5rem;
  }
  .sidebar-category-highlight {
    background-color: #3b82f6; /* blue-500 */
    color: white;
    border-radius: 0.25rem;
  }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tagPills = document.querySelectorAll('.tag-pill') as NodeListOf<HTMLElement>;
        const toolCards = document.querySelectorAll('.tool-card') as NodeListOf<HTMLElement>;
        const categorySections = document.querySelectorAll('.category-section') as NodeListOf<HTMLElement>;
        const sidebarLinks = document.querySelectorAll('#sidebar-categories a') as NodeListOf<HTMLAnchorElement>;
        let selectedTags = new Set<string>();

        tagPills.forEach(pill => {
            pill.addEventListener('click', () => {
                const tag = pill.getAttribute('data-tag');
                if (tag) {
                    if (selectedTags.has(tag)) {
                        selectedTags.delete(tag);
                        pill.classList.remove('bg-blue-600', 'text-white');
                        pill.classList.add('bg-gray-200', 'text-gray-700');
                    } else {
                        selectedTags.add(tag);
                        pill.classList.add('bg-blue-600', 'text-white');
                        pill.classList.remove('bg-gray-200', 'text-gray-700');
                    }
                    filterTools();
                }
            });
        });

function filterTools() {
    // First, reset all highlights from the sidebar
    sidebarLinks.forEach(link => link.classList.remove('sidebar-category-highlight'));

    // Filter tool cards and update categories
    categorySections.forEach(section => {
        let visibleCardsCount = 0;
        const toolCardsInSection = section.querySelectorAll('.tool-card') as NodeListOf<HTMLElement>;

        toolCardsInSection.forEach(card => {
            const toolTagsAttribute = card.getAttribute('data-tags');
            if (toolTagsAttribute) {
                const toolTags = new Set(toolTagsAttribute.split(','));
                const isVisible = selectedTags.size === 0 || [...selectedTags].every(tag => toolTags.has(tag));

                card.style.display = isVisible ? 'block' : 'none';
                if (isVisible) {
                    visibleCardsCount++;
                }
            }
        });

        // Hide or show the entire category section
        const categoryHasVisibleTools = visibleCardsCount > 0;
        section.style.display = categoryHasVisibleTools ? 'block' : 'none';

        // Highlight the corresponding sidebar link if the category is visible
        if (categoryHasVisibleTools && selectedTags.size > 0) {
            const categoryId = section.id;
            const correspondingLink = document.querySelector(`#sidebar-categories a[href="#${categoryId}"]`);
            if (correspondingLink) {
                correspondingLink.classList.add('sidebar-category-highlight');
            }
        }
    });
}
    });
</script>